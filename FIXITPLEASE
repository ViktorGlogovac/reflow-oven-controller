
; standard library
$NOLIST
$MODLP52
$LIST
;$include(math32.inc)
;$include(LCD_4bit.inc)
;Reset vector
$include(math32.inc)


org 0x0000
   ljmp main
   
org 0x001B ; Timer/Counter 1 overflow interrupt vector. Used in this code to replay the wave file.
	ljmp Timer1_ISR

; Timer/Counter 2 overflow interrupt vector
org 0x002B
	ljmp Timer2_ISR

CLK           EQU 22118400  ; Microcontroller system crystal frequency in Hz
SYSCLK        EQU 22118400  ; Microcontroller system clock frequency in Hz
TIMER1_RATE   EQU 22050     ; 22050Hz is the sampling rate of the wav file we are playing
TIMER1_RELOAD EQU 0x10000-(SYSCLK/TIMER1_RATE)
TIMER2_RATE   EQU 1000      ; 1000Hz, for a timer tick of 1ms
TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
BAUD 		  EQU 115200
BRG_VAL		  EQU (0x100-(CLK/(16*BAUD)))


shift_PB   equ P0.5
TEMP_SOAK_PB equ P0.4
TIME_SOAK_PB equ P0.3
TEMP_REFL_PB equ P0.2
TIME_REFL_PB equ P0.1
RESET_PB equ P0.0
START_PB equ P0.6
RETURN_PB equ P0.7

;SSR box 

SSR equ P1.0

RESET_STATE     equ     0
RAMP_TO_SOAK	equ     1
PREHEAT_SOAK	equ     2
RAMP_TO_PEAK	equ     3
REFLOW			equ     4
COOLING			equ     5
	
	
DSEG at 0x30

state:      ds 1
temp_soak:  ds 1
Time_soak:  ds 1
Temp_refl:  ds 1
Time_refl:  ds 1
Count1ms:   ds 2 ; Used to determine when half second has passed
seconds:	ds 1
sec_counter: ds 1
mins:	ds 1
temp:       ds 1
pwm_ratio:        ds 1
result:     ds  2
bcd:        ds  5
x:          ds  4
y:          ds  4

bseg
half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
reset_timer_flag:  dbit 1
safetycheck_flag:  dbit 1
start_flag:        dbit 1

cseg

LCD_RS equ P3.2

LCD_E  equ P3.3
LCD_D4 equ P3.4
LCD_D5 equ P3.5
LCD_D6 equ P3.6
LCD_D7 equ P3.7

$NOLIST
$include(LCD_4bit.inc)
$LIST

Initial_Message:  db 'TS  tS  TR  tR', 0
time_soak_msg:    db 'SOAK TEMP:     <', 0
temp_soak_msg:    db 'SOAK TIME:     <', 0
time_reflow_msg:  db 'REFLOW TEMP:   <', 0
temp_reflow_msg:  db 'REFLOW TIME:   <', 0
current_temp:     db 'Temp:   <', 0
current_time:     db 'Time:   <', 0    

$NOLIST
$include (math32.inc)
$LIST

Change_8bit_Variable MAC
jb %0, %2
Wait_Milli_Seconds(#50) ; de-bounce
jb %0, %2
jnb %0, $
jb SHIFT_PB, skip%Mb
;jb RESET_PB, reset%Mb
dec %1
sjmp skip%Ma
skip%Mb:
inc %1
skip%Ma:
ENDMAC

getbyte mac
clr a
movc a, @a+dptr
mov %0, a
inc dptr
endmac

loadbyte mac
mov a, %0
movx @dptr, a
inc dptr
endmac



; -------------------------;
; Initialize Timer 2	   ;
; -------------------------;


Timer2_Init:
	mov r0, #0x00 ;am/pm alarm
	mov r1, #0x00 ;min
	mov r2, #0x00 ;hour
	mov r3, #0x00 ;am/pm
	mov r4, #0x00 ;alarmsec
	mov r5, #0x00 ;alarmmin
	mov r6, #0x00 ;alarmhour
	mov r7, #0x00 ;pause
	mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
	mov TH2, #high(TIMER2_RELOAD)
	mov TL2, #low(TIMER2_RELOAD)
	; Set the reload value
	mov RCAP2H, #high(TIMER2_RELOAD)
	mov RCAP2L, #low(TIMER2_RELOAD)
	; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
	clr a
	mov Count1ms+0, a
	mov Count1ms+1, a
	; Enable the timer and interrupts
    setb ET2  ; Enable timer 2 interrupt
    setb TR2  ; Enable timer 2
	ret

;---------------------------------;
; ISR for timer 2                 ;
;---------------------------------;
Timer2_ISR:
	clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
	cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
	
	; The two registers used in the ISR must be saved in the stack
	push acc
	push psw
	
	; Increment the 16-bit one mili second counter
	inc Count1ms+0    ; Increment the low 8-bits first
	mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
	jnz Inc_Done
	inc Count1ms+1

Inc_Done:
	; Check if half second has passed
	mov a, Count1ms+0
	cjne a, #low(1000), Timer2_ISR_done ;nstruction changes the carry flag!
	mov a, Count1ms+1
	cjne a, #high(1000), Timer2_ISR_done
	
	; 500 milliseconds have passed.  Set a flag so the main program knows
	setb half_seconds_flag ; Let the main program know half second had passed
	cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
	; Reset to zero the milli-seconds counter, it is a 16-bit variable
	clr a
	mov Count1ms+0, a
	mov Count1ms+1, a
	; Increment the BCD counter
	mov a, sec_counter
	add a, #0x01

Inc_Done_PWM:
	; Do the PWM thing
	; Check if Count1ms > pwm_ratio (this is a 16-bit compare)
	clr c
	mov a, pwm_ratio+0
	subb a, Count1ms+0
	mov a, pwm_ratio+1
	subb a, Count1ms+1
	; if Count1ms > pwm_ratio  the carry is set.  Just copy the carry to the pwm output pin:
	mov SSR, c

	; Check if a second has passed
	mov a, Count1ms+0
	cjne a, #low(1000), Timer2_ISR_done
	mov a, Count1ms+1
	cjne a, #high(1000), Timer2_ISR_done
	
	; Reset to zero the milli-seconds counter, it is a 16-bit variable
	clr a
	mov Count1ms+0, a
	mov Count1ms+1, a
	
	; Increment binary variable 'seconds'
	inc seconds

Timer2_ISR_da:
	da a ; Decimal adjust instruction.  Check datasheet for more details!
	cjne a, #0x05, sec ;check if 5 sec have passed
;	lcall Play_sound
	mov a, #0x00
sec:
	mov sec_counter, a

Timer2_ISR_seconds:
    jnb seconds_flag, Timer2_ISR_done
    mov a, seconds
    add a, #0x01
    da a 
    jb reset_timer_flag, Reset_seconds

Reset_seconds:
clr seconds

    
	
Timer2_ISR_done:
	pop psw
	pop acc
	reti

INIT_SPI: 
    setb MY_MISO    ; Make MISO an input pin 
    clr MY_SCLK     ; For mode (0,0) SCLK is zero 
    ret 
  


DO_SPI_G: 
    push acc 
    mov R1, #0      ; Received byte stored in R1 
    mov R2, #8      ; Loop counter (8-bits)
     
DO_SPI_G_LOOP: 
    mov a, R0       ; Byte to write is in R0 
    rlc a           ; Carry flag has bit to write 
    mov R0, a 
    mov MY_MOSI, c 
    setb MY_SCLK    ; Transmit 
    mov c, MY_MISO  ; Read received bit 
    mov a, R1       ; Save received bit in R1 
    rlc a 
    mov R1, a 
    clr MY_SCLK 
    djnz R2, DO_SPI_G_LOOP 
    pop acc 
    ret
Left_blank mac
	mov a, %0
	anl a, #0xf0
	swap a
	jz Left_blank_%M_a
	ljmp %1
Left_blank_%M_a:
	Display_char(#' ')
	mov a, %0
	anl a, #0x0f
	jz Left_blank_%M_b
	ljmp %1
Left_blank_%M_b:
	Display_char(#' ')
endmac

Send_BCD mac
	push ar0
	mov r0, %0
	lcall ?Send_BCD
	pop ar0
endmac


?Send_BCD:
	push acc
	;send most significant digit
	mov a, r0
	swap a
	anl a, #0fh
	orl a, #30h
	lcall putchar
	;send least significant digit
	mov a, r0
	anl a, #0fh
	orl a, #30h
	lcall putchar
	pop acc
	ret

Display_10_digit_BCD:
	Set_Cursor(2, 7)
	Display_BCD(bcd+4)
	Display_BCD(bcd+3)
	Display_BCD(bcd+2)
	Display_BCD(bcd+1)
	Display_BCD(bcd+0)
	; Replace all the zeros to the left with blanks
	Set_Cursor(2, 7)
	Left_blank(bcd+4, skip_blank)
	Left_blank(bcd+3, skip_blank)
	Left_blank(bcd+2, skip_blank)
	Left_blank(bcd+1, skip_blank)
	mov a, bcd+0
	anl a, #0f0h
	swap a
	jnz skip_blank
	Display_char(#' ')
skip_blank:
	ret

Temperature_loop:
    clr CE_ADC
    mov R0, #0b00000001
    lcall DO_SPI_G
    
    mov R0, #0b10000000
    lcall DO_SPI_G
    mov a, R1
    anl a, #0b00000011
    mov Result+1, a
    
    mov R0, #55H
    lcall DO_SPI_G
    mov Result+0, R1
    setb CE_ADC
    ;my code
    
    lcall WaitHalfSec
InitSerialPort:
    ; Since the reset button bounces, we need to wait a bit before
    ; sending messages, otherwise we risk displaying gibberish!
    mov R1, #222
    mov R0, #166
    djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
    djnz R1, $-4 ; 22.51519us*222=4.998ms
    ; Now we can proceed with the configuration
	orl	PCON,#0x80
	mov	SCON,#0x52
	mov	BDRCON,#0x00
	mov	BRL,#BRG_VAL
	mov	BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;

SendToSerialPort:
	mov b, #100
	div ab
	orl a, #0x30 ; Convert hundreds to ASCII
	lcall putchar ; Send to PuTTY/Python/Matlab
	mov a, b    ; Remainder is in register b
	mov b, #10
	div ab
	orl a, #0x30 ; Convert tens to ASCII
	lcall putchar ; Send to PuTTY/Python/Matlab
	mov a, b
	orl a, #0x30 ; Convert units to ASCII
	lcall putchar ; Send to PuTTY/Python/Matlab
	ret



SendToLCD:
mov b, #100
div ab
orl a, #0x30 ; Convert hundreds to ASCII
lcall ?WriteData ; Send to LCD
mov a, b    ; Remainder is in register b
mov b, #10
div ab
orl a, #0x30 ; Convert tens to ASCII
lcall ?WriteData; Send to LCD
mov a, b
orl a, #0x30 ; Convert units to ASCII
lcall ?WriteData; Send to LCD
ret

putchar:
    jnb TI, putchar
    clr TI
    mov SBUF, a
    ret

; Send a constant-zero-terminated string using the serial port (for the temp/putty stuff)
SendString:
    clr A
    movc A, @A+DPTR
    jz SendStringDone
    lcall putchar
    inc DPTR
    sjmp SendString
SendStringDone:
    ret


Save_Configuration:
mov FCON, #0x08 ; Page Buffer Mapping Enabled (FPS = 1)
mov dptr, #0x7f80 ; Last page of flash memory
; Save variables
loadbyte(temp_soak) ; @0x7f80
loadbyte(time_soak) ; @0x7f81
loadbyte(temp_refl) ; @0x7f82
loadbyte(time_refl) ; @0x7f83
loadbyte(#0x55) ; First key value @0x7f84
loadbyte(#0xAA) ; Second key value @0x7f85
mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
orl EECON, #0b01000000 ; Enable auto-erase on next write sequence
mov FCON, #0x50 ; Write trigger first byte
mov FCON, #0xA0 ; Write trigger second byte
; CPU idles until writing of flash completes.
mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
anl EECON, #0b10111111 ; Disable auto-erase
ret


Load_Configuration:
mov dptr, #0x7f84 ; First key value location.
getbyte(R0) ; 0x7f84 should contain 0x55
cjne R0, #0x55, Load_Defaults
getbyte(R0) ; 0x7f85 should contain 0xAA
cjne R0, #0xAA, Load_Defaults
; Keys are good.  Get stored values.
mov dptr, #0x7f80
getbyte(temp_soak) ; 0x7f80
getbyte(time_soak) ; 0x7f81
getbyte(temp_refl) ; 0x7f82
getbyte(time_refl) ; 0x7f83
ret

Load_Defaults:
mov temp_soak, #150
mov time_soak, #45
mov temp_refl, #225
mov time_refl, #30
ret

main:

    mov SP, #0x7F
    mov P0M0, #0
    mov P0M1, #0
    mov sec_counter, #0x00
    mov seconds, #0x00
    mov state, #0
    lcall Timer2_Init
    setb EA
    setb half_seconds_flag
    clr safetycheck_flag
    ;initialize

    lcall LCD_4BIT

    loop_temp:
	lcall TA_Said_Use_This
    lcall PrintTemperature
    mov a, #'\r'
    lcall putchar
    mov a, #'\n'
    lcall putchar

FSM1:
    mov a, FSM1_state
    mov segBCD+0, seconds

FSM1_ERROR:
    Set_Cursor(1,1)
  	Send_Constant_String(#error)
  	Set_Cursor(2,1)
  	Send_Constant_String(#error2)
    Wait_Milli_Seconds(#500)
    ljmp FSM1_state0

FSM1_Return_state0:


FSM1_state0:

    cjne a, #0, FSM1_state1
    mov pwm_ratio+0, #low(0)
	mov pwm_ratio+1, #high(0)
    jb START_PB, START_PRESSED
    ; For convenience a few handy macros are included in 'LCD_4bit.inc':
    lcall Load_Configuration
	Set_Cursor(1, 1)
    Send_Constant_String(#Initial_Message)
    Set_Cursor(2, 1)
    mov a, temp_soak
	lcall SendToLCD
	Set_Cursor(2, 5)
    mov a, time_soak
	lcall SendToLCD
	Set_Cursor(2, 9)
    mov a, temp_refl
	lcall SendToLCD
	Set_Cursor(2, 13)
    mov a, time_refl
	lcall SendToLCD
	
	; After initialization the program stays in this 'forever' loop
loop:

loop_a:
	Change_8bit_Variable(TEMP_SOAK_PB, temp_soak, loop_b)
;	Change_8bit_Variable(RESET_PB, temp_soak, loop_a)
	Set_Cursor(2, 1)
	mov a, temp_soak
	lcall SendToLCD
	lcall Save_Configuration
loop_b:
	Change_8bit_Variable(TIME_SOAK_PB, time_soak, loop_c)
;	Change_8bit_Variable(RESET_PB, time_soak, loop_b)
	Set_Cursor(2, 5)
	mov a, time_soak
	lcall SendToLCD
	lcall Save_Configuration	
loop_c:
	Change_8bit_Variable(TEMP_REFL_PB, temp_refl, loop_d)
;	Change_8bit_Variable(RESET_PB, temp_refl, loop_c)
	Set_Cursor(2, 9)
	mov a, temp_refl
	lcall SendToLCD
	lcall Save_Configuration	

loop_d:
	Change_8bit_Variable(TIME_REFL_PB, time_refl, loop_e)
;	Change_8bit_Variable(RESET_PB, time_refl, loop_d)
	Set_Cursor(2, 13)
	mov a, time_refl
	lcall SendToLCD
	lcall Save_Configuration	

loop_e:
	jnb RESET_PB, loop_1
    ;jump to state 1
    jb START_PB, FSM1_state0_done
    jnb START_PB, $ ; Wait for key release
    mov FSM1_state, #1	
    ljmp loop
   
loop_1:
	lcall Load_Defaults
	Set_Cursor(2, 1)
	mov a, temp_soak
	lcall SendToLCD
	Set_Cursor(2, 5)
	lcall SendToLCD
	mov a, time_soak
	Set_Cursor(2, 9)
	mov a, temp_refl
	lcall SendToLCD
	Set_Cursor(2, 13)
	mov a, time_refl
	lcall SendToLCD
	lcall Save_Configuration
    ljmp loop

START_PRESSED:
mov FSM1_state, #1

FSM1_state0_done:
ljmp FSM2

FSM1_state1:
cjne a, #1, FSM1_state2
mov pwm_ratio+0, #low(1000)
mov pwm_ratio+1, #high(1000)
jb safetycheck_flag, Safety_Passed
mov a, temp
cjne a, #50, Greater
mov a, #60
subb a, seconds
jz FSM1_ERROR
sjmp FSM1_state1

Greater:
sjmp set_flag

set_flag:
SETB safetycheck_flag

Safety_Passed:
mov a, temp_soak
clr c
subb a, temp
jnc FSM1_state1_done
mov FSM1_state, #2
setb reset_timer_flag
clr reset_timer_flag

FSM1_state1_done:
ljmp FSM2

FSM1_state2:
cjne a, #2, FSM1_state3
mov pwm_ratio+0, #low(200)
mov pwm_ratio+1, #high(200)
mov a, time_soak
clr c
subb a, sec
jnc FSM1_state2_done
mov FSM1_state, #3
setb reset_timer_flag
clr reset_timer_flag

FSM1_state2_done:
ljmp FSM2

FSM1_state3:
cjne a, #3, FSM1_state4
mov pwm_ratio+0, #low(1000)
mov pwm_ratio+1, #high(1000)
mov a, reflow_temp
clr c
subb a, oven_temp
jnc FSM1_state3_done
setb reset_timer_flag
clr reset_timer_flag
mov FSM1_state, #4

FSM1_state3_done:
ljmp FSM2

FSM1_state4: 
cjne a, #4, FSM1_state5
mov pwm_ratio+0, #low(200)
mov pwm_ratio+1, #high(200)
mov a, Time_refl
clr c
subb a , Time_soak
jnc FSM1_state4_done
mov FSM1_state, #5

FSM1_state4_done:
ljmp FSM2

FSM1_state5:  
mov pwm_ratio+0, #low(0)
mov pwm_ratio+1, #high(0)
mov a, #60
clr c
subb a, reflow_temp
jnc FSM_state5_done
mov state, #0

FSM1_state5_done:
ljmp FSM2

END
